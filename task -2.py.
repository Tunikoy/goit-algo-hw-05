# Ваш код для двійкового пошуку
def binary_search(arr, target):
    left, right = 0, len(arr) - 1
    iterations = 0
    upper_bound = None

    while left <= right:
        iterations += 1
        mid = (left + right) // 2

        if arr[mid] == target:
            return iterations, arr[mid]

        if arr[mid] < target:
            left = mid + 1
        else:
            right = mid - 1
            upper_bound = arr[mid]

    # Якщо точного збігу немає, повертаємо найменший більший елемент
    if upper_bound is None:
        upper_bound = arr[left] if left < len(arr) else None

    return iterations, upper_bound

# Тестування
def test_binary_search():
    arr = [1.1, 2.2, 3.3, 4.4, 5.5, 6.6, 7.7, 8.8, 9.9]
    target = 4.4
    iterations, upper_bound = binary_search(arr, target)
    print(f"Searching for {target} in {arr}, found {upper_bound} in {iterations} iterations.")
    assert iterations > 0, "Error: There should be at least one iteration."
    assert upper_bound == 4.4, f"Error: The upper bound should be 4.4, got {upper_bound}"

    target = 5.0
    iterations, upper_bound = binary_search(arr, target)
    print(f"Searching for {target} in {arr}, found {upper_bound} in {iterations} iterations.")
    assert upper_bound == 5.5, f"Error: The upper bound should be 5.5, got {upper_bound}"

    target = 10.0
    iterations, upper_bound = binary_search(arr, target)
    print(f"Searching for {target} in {arr}, found {upper_bound} in {iterations} iterations.")
    assert upper_bound is None, "Error: Upper bound should be None for a target out of range."

    target = 0.5
    iterations, upper_bound = binary_search(arr, target)
    print(f"Searching for {target} in {arr}, found {upper_bound} in {iterations} iterations.")
    assert upper_bound == 1.1, f"Error: The upper bound should be 1.1, got {upper_bound}"

    print("All tests for binary search passed.")

# Запуск тестів, якщо файл запускається напряму
if __name__ == "__main__":
    test_binary_search()
